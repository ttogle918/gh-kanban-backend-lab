name: Project Sync (Issues/PR → User Project)

on:
  issues:
    types: [opened, labeled, unlabeled, closed, reopened]
  pull_request:
    types: [opened, labeled, unlabeled, closed, reopened]
  # 필요시 수동도 넣을 수 있어요
  # workflow_dispatch:

permissions: write-all

jobs:
  sync:
    if: ${{ github.event_name == 'issues' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Relay event details
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Repo: ${{ github.repository }}"
          echo "Action: ${{ github.event.action }}"

      - name: Sync to Project v2 (User-level)
        uses: actions/github-script@v7
        env:
          OWNER: ttogle918
          PROJECT_TITLE: "test: multiple repo kanban board"
          STATUS_TODO: "Todo"
          STATUS_DOING: "In Progress"
          STATUS_DONE: "Done"
        with:
          script: |
            const owner = process.env.OWNER;
            const title = process.env.PROJECT_TITLE;
            const isIssue = !!context.payload.issue;
            const payload = isIssue ? context.payload.issue : context.payload.pull_request;
            const contentId = payload.node_id;

            // 1) User-level 프로젝트 목록 조회
            const projectsRes = await github.graphql(`
              query($owner:String!){
                user(login:$owner){
                  projectsV2(first: 50, orderBy:{field:UPDATED_AT, direction:DESC}){
                    nodes { id title number fields(first:10){ nodes { ... on ProjectV2FieldCommon { id name } } } }
                  }
                }
              }`, { owner }
            );
            const projects = projectsRes.user?.projectsV2?.nodes || [];
            const proj = projects.find(p => p.title === title);
            if (!proj) { core.setFailed(`Project titled "${title}" not found`); return; }

            const statusField = proj.fields.nodes.find(f => f.name === "Status");
            if (!statusField) { core.setFailed(`"Status" field not found in project`); return; }

            // 2) 아이템 추가 (이미 있으면 찾아서 itemId)
            let itemId = null;
            try {
              const addRes = await github.graphql(`
                mutation($projectId:ID!, $contentId:ID!){
                  addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}){ item { id } }
                }`, { projectId: proj.id, contentId }
              );
              itemId = addRes.addProjectV2ItemById.item.id;
            } catch (e) {
              const itemsRes = await github.graphql(`
                query($projectId:ID!){
                  node(id:$projectId){
                    ... on ProjectV2 {
                      items(first: 100){
                        nodes { id content { ... on Issue { node_id } ... on PullRequest { node_id } } }
                      }
                    }
                  }
                }`, { projectId: proj.id }
              );
              const found = itemsRes.node.items.nodes.find(n => n.content?.node_id === contentId);
              itemId = found?.id;
            }
            if (!itemId) { core.setFailed(`Failed to determine project item ID`); return; }

            // 3) 상태값 결정
            const labels = (payload.labels || []).map(l => String(l.name).toLowerCase());
            const closed = (isIssue ? payload.state : payload.state) === 'closed';
            let target = process.env.STATUS_TODO;
            if (closed) target = process.env.STATUS_DONE;
            else if (labels.includes('doing')) target = process.env.STATUS_DOING;

            const optionsRes = await github.graphql(`
              query($pid:ID!, $fid:ID!){
                node(id:$pid){
                  ... on ProjectV2 {
                    field(id:$fid){ ... on ProjectV2SingleSelectField { options { id name } } }
                  }
                }
              }`, { pid: proj.id, fid: statusField.id }
            );
            const options = optionsRes.node.field.options;
            const opt = options.find(o => o.name === target);
            if (!opt) { core.setFailed(`Status option "${target}" not found`); return; }

            // 4) 상태 업데이트
            await github.graphql(`
              mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $opt:String!){
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId, itemId:$itemId, fieldId:$fieldId,
                  value:{ singleSelectOptionId:$opt }
                }){ clientMutationId }
              }`, { projectId: proj.id, itemId, fieldId: statusField.id, opt: opt.id }
            );
