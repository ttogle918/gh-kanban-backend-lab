name: Project Sync (Issues → Project)

on:
  issues:
    types: [opened, labeled, unlabeled, closed, reopened]

# 프로젝트 권한 키는 따로 없어요. 레포 설정에서 Read/Write 권한 허용 + 여기선 write-all로 간단히.
permissions: write-all

jobs:
  add_or_update:
    # push로는 아예 안 돌도록 가드
    if: ${{ github.event_name == 'issues' }}
    runs-on: ubuntu-latest
    steps:
      - name: Debug event
        run: |
          echo "event=${{ github.event_name }}"
          echo "repo=${{ github.repository }}"
          echo "issue=${{ github.event.issue.html_url }}"

      - name: Add/Move on central Project
        uses: actions/github-script@v7
        env:
          OWNER: ttogle918          # 본인 계정/조직
          PROJECT_NUMBER: 4         # 통합 Project 번호 (URL에 /projects/1 이면 1)
          STATUS_TODO: "Todo"
          STATUS_DOING: "In Progress"
          STATUS_DONE: "Done"
        with:
          script: |
            const owner = process.env.OWNER;
            const number = Number(process.env.PROJECT_NUMBER);
            const issue = context.payload.issue;
            const contentId = issue.node_id;

            // 1) User/Org 레벨 Project v2 조회
            const projectQ = await github.graphql(`
              query($owner:String!, $number:Int!){
                organization(login:$owner){ projectV2(number:$number){ id fields(first:50){nodes{... on ProjectV2FieldCommon {id name}}}}}
                user(login:$owner){ projectV2(number:$number){ id fields(first:50){nodes{... on ProjectV2FieldCommon {id name}}}}}
              }`, { owner, number }
            );
            const proj = (projectQ.organization?.projectV2) ?? (projectQ.user?.projectV2);
            if (!proj) { core.setFailed('Project not found (owner/number 확인)'); return; }

            // 2) Status 필드/옵션
            const statusField = proj.fields.nodes.find(f=>f.name==="Status");
            if (!statusField) { core.setFailed('Status field not found (보드에 Status 있어야 함)'); return; }
            const optQ = await github.graphql(`
              query($pid:ID!, $fid:ID!){
                node(id:$pid){
                  ... on ProjectV2 {
                    field(id:$fid){ ... on ProjectV2SingleSelectField { options { id name } } }
                  }
                }
              }`, { pid: proj.id, fid: statusField.id }
            );
            const opts = optQ.node.field.options;

            // 3) 프로젝트에 아이템 추가(이미 있으면 무시)
            let itemId = null;
            try {
              const add = await github.graphql(`
                mutation($projectId:ID!, $contentId:ID!){
                  addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}){ item { id } }
                }`, { projectId: proj.id, contentId }
              );
              itemId = add.addProjectV2ItemById.item.id;
            } catch (e) {
              // 이미 있을 때는 조회해서 itemId 찾기
              const itemsQ = await github.graphql(`
                query($projectId:ID!, $first:Int!){
                  node(id:$projectId){
                    ... on ProjectV2 {
                      items(first:$first){
                        nodes { id content { ... on Issue { id node_id } } }
                      }
                    }
                  }
                }`, { projectId: proj.id, first: 50 }
              );
              const found = itemsQ.node.items.nodes.find(n => n.content?.node_id === contentId);
              itemId = found?.id;
            }
            if (!itemId) { core.setFailed('Project itemId not found'); return; }

            // 4) 라벨/상태로 목표 Status 결정
            co
